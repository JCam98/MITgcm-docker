#!/bin/bash

# Build options for gfortran compiler (GNU) on Linux AMD64 platform
#
#  Tested with gcc-gfortran v4.1.x as shipped with Fedora Core 6,7,8
#         with gcc-gfortran v4.3.x as shipped with Fedora Core 9,10
#
# MPI : Tested on acesgrid (Fedora Core 15), using:
#       module load gcc     (Version 4.6.0)
#   and with mpich1:
#       module load mvapich
#   or  with mpich2:
#       module load mvapich2
#   or  with openmpi:
#       module load openmpi
# and on baudelaire.csail.mit.edu (FC13), using:
#       export MPI_GCC_DIR=/srv/software/gcc/gcc-packages/gcc-4.4.5/mpich2/mpich2-1.3
#       export MPI_INC_DIR=$MPI_GCC_DIR/include
#       export PATH=$MPI_GCC_DIR/bin:$PATH
#
# and on IRIDIS at Southampton
# http://www.southampton.ac.uk/isolutions/computing/hpc/iridis/
#    with
#       module load openmpi/1.4.3/gcc-4.3.3
#    and
#       export MPI_INC_DIR=$MPIROOT/include

if test "x$MPI" = xtrue ; then
  DEFINES='-DALLOW_USE_MPI -DALWAYS_USE_MPI'
  F90C=mpifort
else
  DEFINES=''
  F90C=gfortran
fi

CC=gcc
FC=gfortran
LINK="$F90C"

DEFINES="$DEFINES -DWORDLENGTH=4 -DNML_TERMINATOR"
EXTENDED_SRC_FLAG='-ffixed-line-length-132'
F90FIXEDFORMAT='-ffixed-form'
GET_FC_VERSION="--version"
OMPFLAG='-fopenmp'

NOOPTFLAGS='-O0'
NOOPTFILES=''

CFLAGS='-O0'
FFLAGS="$FFLAGS -fconvert=big-endian -fimplicit-none"
#- for big setups, compile & link with "-fPIC" or set memory-model to "medium":
#CFLAGS="$CFLAGS -fPIC"
#FFLAGS="$FFLAGS -fPIC"
#-  with FC 19, need to use this without -fPIC (which cancels -mcmodel option):
CFLAGS="$CFLAGS -mcmodel=medium"
FFLAGS="$FFLAGS -mcmodel=medium"

#- for setting specific options, check compiler version:
fcVers=`$FC -dumpversion | head -n 1 | sed 's/^[^0-9]* //;s/\..*$//'`
if ! [[ $fcVers =~ ^[0-9]+$ ]] ; then
  echo "    un-recognized Compiler-version '$fcVers' ; ignored (-> set to 0)"
  fcVers=0
else 
  echo "    get Compiler-version: '$fcVers'" 
fi

if [ $fcVers -ge 10 ] ; then
  FFLAGS="$FFLAGS -fallow-argument-mismatch"
fi

if test "x$IEEE" = x ; then     #- with optimisation:
   #- full optimisation
    FOPTIM='-O3 -funroll-loops -ftree-vectorize'
    NOOPTFLAGS='-O2 -funroll-loops'
    NOOPTFILES="$NOOPTFILES ini_masks_etc.F"
else
   #- simply:
    FFLAGS="$FFLAGS -Wall"
  if test "x$DEVEL" = x ; then  #- no optimisation + IEEE :
    FOPTIM='-O0'
  else                          #- development/check options:
    FOPTIM='-O0 -g -fbounds-check'
    FOPTIM="$FOPTIM -ffpe-trap=invalid,zero,overflow -finit-real=inf"
  fi
fi

F90FLAGS=$FFLAGS
F90OPTIM=$FOPTIM

if [ "x$NETCDF_ROOT" != x ] ; then
    INCLUDEDIR="${NETCDF_ROOT}/include"
    INCLUDES="-I${NETCDF_ROOT}/include"
    LIBDIR="${NETCDF_ROOT}/lib"
    LIBS="-L${NETCDF_ROOT}/lib"
elif [ "x$NETCDF_HOME" != x ]; then
    INCLUDEDIR="${NETCDF_HOME}/include"
    INCLUDES="-I${NETCDF_HOME}/include"
    LIBDIR="${NETCDF_HOME}/lib"
    LIBS="-L${NETCDF_HOME}/lib"
elif [ "x$NETCDF_INC" != x -a "x$NETCDF_LIB" != x ]; then
    NETCDF_INC=`echo $NETCDF_INC | sed 's/-I//g'`
    NETCDF_LIB=`echo $NETCDF_LIB | sed 's/-L//g'`
    INCLUDEDIR="${NETCDF_INC}"
    INCLUDES="-I${NETCDF_INC}"
    LIBDIR="${NETCDF_LIB}"
    LIBS="-L${NETCDF_LIB}"
elif [ "x$NETCDF_INCDIR" != x -a "x$NETCDF_LIBDIR" != x ]; then
    INCLUDEDIR="${NETCDF_INCDIR}"
    INCLUDES="-I${NETCDF_INCDIR}"
    LIBDIR="${NETCDF_LIBDIR}"
    LIBS="-L${NETCDF_LIBDIR}"
elif test -d /usr/include/netcdf-3 ; then
    INCLUDES='-I/usr/include/netcdf-3'
    LIBS='-L/usr/lib/netcdf-3 -L/usr/lib64/netcdf-3'
elif test -d /usr/include/netcdf ; then
    INCLUDES='-I/usr/include/netcdf'
elif test -d /usr/local/netcdf ; then
    INCLUDES='-I/usr/local/netcdf/include'
    LIBS='-L/usr/local/netcdf/lib'
elif test -d /usr/local/include/netcdf.inc ; then
    INCLUDES='-I/usr/local/include'
    LIBS='-L/usr/local/lib64'
elif test -d /usr/include/netcdf.inc ; then
    INCLUDES='-I/usr/include'
    LIBS='-L/usr/lib64'
fi

if [ "x$MPI" = xtrue ] ; then
    MPI_DIR='/usr/lib64/openmpi'
    MPI_INC_DIR='/usr/include/openmpi-x86_64'
    INCLUDES="$INCLUDES -I$MPI_INC_DIR"
    INCLUDEDIRS="$INCLUDEDIRS $MPI_INC_DIR"
    #- used for parallel (MPI) DIVA
    MPIINCLUDEDIR="$MPI_INC_DIR"
    MPI_HEADER_FILES='mpif.h mpiof.h'

    LIBS="$LIBS -I$MPI_DIR/lib -Wl,-rpath -Wl,$MPI_DIR/lib -Wl,--enable-new-dtags -L$MPI_DIR/lib -lmpi_usempif08 -lmpi_usempi_ignore_tkr -lmpi_mpifh -lmpi"
fi
